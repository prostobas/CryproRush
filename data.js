// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–æ–≤
const leaderboardData = {
    records: [],

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
    async loadRecords() {
        try {
            const response = await fetch('leaderboard.json');
            const data = await response.json();
            this.records = data.records;
            return this.records;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ—Ä–¥–æ–≤:', error);
            return [];
        }
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    async saveRecords() {
        try {
            const response = await fetch('save_records.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ records: this.records })
            });
            
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–æ—Ä–¥–æ–≤:', error);
            // –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
            localStorage.setItem('leaderboard', JSON.stringify(this.records));
        }
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∫–æ—Ä–¥–∞
    async addRecord(coins) {
        const date = new Date().toLocaleDateString();
        const newRecord = { coins, date };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        this.records.push(newRecord);
        this.records.sort((a, b) => b.coins - a.coins);
        this.records = this.records.slice(0, 3);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await this.saveRecords();
        
        return this.records.findIndex(record => record === newRecord) + 1;
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∫–æ—Ä–¥
    isHighScore(coins) {
        if (this.records.length < 3) return true;
        return coins > this.records[this.records.length - 1].coins;
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–æ–≤
    getRecords() {
        return this.records;
    },

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤
    async clearRecords() {
        this.records = [];
        await this.saveRecords();
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    updateLeaderboardDisplay() {
        const leaderboardScreen = document.getElementById('leaderboard-screen');
        const cardsContainer = leaderboardScreen.querySelector('.about-cards');
        cardsContainer.innerHTML = '';

        const gradients = ['gradient-gold', 'gradient-silver', 'gradient-bronze'];
        const medals = ['ü•á', 'ü•à', 'ü•â'];

        this.records.forEach((record, index) => {
            const card = document.createElement('div');
            card.className = 'about-card';
            card.innerHTML = `
                <div class="feature-block ${gradients[index]}">
                    <div class="block-icon">${medals[index]}</div>
                </div>
                <div class="feature-content">
                    <h2>${index + 1} –º–µ—Å—Ç–æ</h2>
                    <p>${record.coins} –º–æ–Ω–µ—Ç</p>
                    <p class="date">${record.date}</p>
                </div>
            `;
            cardsContainer.appendChild(card);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞
        for (let i = this.records.length; i < 3; i++) {
            const card = document.createElement('div');
            card.className = 'about-card';
            card.innerHTML = `
                <div class="feature-block ${gradients[i]}">
                    <div class="block-icon">${medals[i]}</div>
                </div>
                <div class="feature-content">
                    <h2>${i + 1} –º–µ—Å—Ç–æ</h2>
                    <p>–ü—É—Å—Ç–æ</p>
                    <p class="date">-</p>
                </div>
            `;
            cardsContainer.appendChild(card);
        }
    }
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ—Ä–¥—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
leaderboardData.loadRecords().then(() => {
    console.log('–†–µ–∫–æ—Ä–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.leaderboardData = leaderboardData; 